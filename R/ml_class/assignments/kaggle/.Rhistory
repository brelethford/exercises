a = 1
a
a <- 23
a
a+2
a; a+2
install.packages("httr")
library(httr)
install.packages("xml")
install.packages("XML")
install.packages("XML")
library("httr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("XML")
install.packages("XML")
library("XML", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
url <- 'https://twitter.com/search?q=donald+trump+twitter&ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Esearch'
xmlpage <- htmlParse(rawToChar(GET(url)$content))
xmlpage
length(capture.output(xmlpage))
capture.output(xmlpage)[1:4]
searchfor <- //p[class="TweetTextSize  js-tweet-text tweet-text" lang="en" data-aria-label-part="0">]
searchfor <- "//p[class="TweetTextSize  js-tweet-text tweet-text" lang="en" data-aria-label-part="0">]""
searchfor <- '//p[class="TweetTextSize  js-tweet-text tweet-text" lang="en" data-aria-label-part="0">]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- '//p[class="TweetTextSize  js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- '//p[@class="TweetTextSize  js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
tweet
capture.output(xmlpage)[1:4]
searchfor <- '//p[@class="TweetTextSize  js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- '//p[@class="TweetTextSize  js-tweet-text tweet-text "]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
tweet
searchfor <- '//p[@class="TweetTextSize  js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- "//p[@class='TweetTextSize  js-tweet-text tweet-text'']"
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- "//p[@class='TweetTextSize  js-tweet-text tweet-text']"
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
tweet
searchfor <- "//p"
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
tweet
url <- 'https://twitter.com/realDonaldTrump'
xmlpage <- htmlParse(rawToChar(GET(url)$content))
length(capture.output(xmlpage))
capture.output(xmlpage)[1:4]
#Now let's try to get just the tweets.
searchfor <- "//p[@class='TweetTextSize  js-tweet-text tweet-text']"
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
url <- 'https://twitter.com/realDonaldTrump?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor'
xmlpage <- htmlParse(rawToChar(GET(url)$content))
length(capture.output(xmlpage))
capture.output(xmlpage)[1:4]
#Now let's try to get just the tweets.
searchfor <- '//p[@class="TweetTextSize TweetTextSize--normal js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
length(tweet)
tweet[1]
tweet[2]
tweet[3]
tweet[4]
tweet[5]
tail(tweet[5])
tail(tweet[5][100:])
tweet[5][100:]
tweet[5]
searchfor2 <- '//strong[@class="fullname show-popup-with-id u-textTruncate "]'
author <- xpathSApply(xmlpage, searchfor, xmlValue)
author
searchfor2 <- '//strong[@class="fullname show-popup-with-id u-textTruncate "]'
author <- xpathSApply(xmlpage, searchfor2, xmlValue)
author
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
#Practice basic linear modelling in R on the mtcars dataset.
mtcars
#Practice basic linear modelling in R on the mtcars dataset.
data(mtcars)
glimpse(mtcars)
car_mod <- lm(mpg ~ wt, data=mtcars)
car_mod$coefficients
summary(car_mod)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
glimpse(mtcars)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg ~cyl, data=mtcars)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~cyl+wt, data=mtcars)
summar(car_mod2)
summary(car_mod2)
summary(car_mod)
summary(car_mod2)
summary(car_mod)
summary(car_mod2)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~cyl+wt, data=mtcars)
summary(car_mod2)
glimpse(mtcars)
car_mod <- lm(mpg ~ wt, data=mtcars)
summary(car_mod)
glimpse(mtcars)
car_mod <- lm(mpg ~ disp, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ cyl, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ wt, data=mtcars)
summary(car_mod)
glimpse(mtcars)
car_mod <- lm(mpg ~ gear, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ gear, data=mtcars)
summary(car_mod)
glimpse(mtcars)
car_mod <- lm(mpg ~ hp, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ wt, data=mtcars)
car_mod <- lm(mpg ~ cyl, data=mtcars)
car_mod <- lm(mpg ~ cyl, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ factor(cyl), data=mtcars)
summary(car_mod)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
glimpse(mtcars)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt+hp+am, data=mtcars)
summary(car_mod2)
glimpse(mtcars)
#Improve the model by adding additional variables.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
install.packages("glimnet")
install.packages("caret")
source('~/Desktop/ML/Rclass/Assignments/kaggle/kaggle.R', echo=TRUE)
?write_csv
library(tidyr)
mod
pred
pred$Activity
mod$confusion.matrix
#Submit:
pred
#Submit:
predictions
#Submit:
pred
#Submit:
pred$
submission <- write_csv(,'submission.csv')
#Submit:
pred$predictions
#Submit:
df_pred <- data.frame(Id=test$Id,Activity=pred$predictions)
df_pred
submission <- write_csv(df_pred,'submission.csv')
source('~/Desktop/ML/Rclass/Assignments/kaggle/kaggle.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/kaggle/kaggle.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
rf_mod <- ranger(Activity ~ . -Id,train,classification = TRUE)
rf_mod
rf_mod$confusion.matrix
#Make predictions:
rf_pred <- predict(mod,test)
rf_mod$prediction.error
rf_mod$confusion.matrix
1 - rf_mod$prediction.error
dt_mod <- rpart(factor(Activity) ~ .-Id,train,control=list(maxdepth=3))
fancyRpartPlot(dt, sub="")
fancyRpartPlot(dt)
library(rpart)
dt_mod <- rpart(factor(Activity) ~ .-Id,train,control=list(maxdepth=3))
fancyRpartPlot(dt, sub="")
fancyRpartPlot(dt_mod, sub="")
dt_mod
#Make predictions:
dt_pred <- predict(dt_mod,test,type='class')
dt_pred
#Make predictions:
dt_pred <- predict(dt_mod,test,type='class')
dt_pred$predictions
confusionMatrix(dt_pred,factor(Activity))
confusionMatrix(dt_pred,factor(test$Activity))
dt_pred
confusionMatrix(dt_mod,factor(train$Activity))
sub_train <- train[1:0.8*length(train)]
sub_train
train
sub_train
train
sub_train
sub_train
train
sub_train <- train[:,1:0.8*length(train)]
sub_train <- train[,1:0.8*length(train)]
sub_train
sub_train <- train[1:0.8*length(train),:]
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
train[0:4,0:6]
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
train[0:4,0:7]
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
train[1:4,0:7]
sub_train <- train[1:round(0.8*length(train)),:]
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
train[1:round(0.8*length(train)),:]
sub_train <- sample(1:nrow(train)*0.8)
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
sub_train
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
train
sub_train
sub_train <- sample(1:nrow(train),0.8*nrow(train))
sub_train
sub_train <- sample(train,0.8*nrow(train))
?sample
sub_train <- sample(1:nrow(train),0.8*nrow(train))
sub_train
sub_train <- sample(1:nrow(train),1:0.8*nrow(train))
sub_train
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
train
sub_train <- sample(1:nrow(train),0.8*nrow())
sub_train <- sample(1:nrow(train),0.8*nrow(train))
sub_train
sub_train <- sample(1:nrow(train),0.8*nrow(train))
sub_train <- train[train_ind]
sub_train <- train[train_ind:]
sub_train <- train[train_ind;]
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
train_ind
train_ind <- sample(1:nrow(train),0.8*nrow(train))
sub_train <- train[train_ind:]
train_ind <- sample(1:nrow(train),floor(0.8*nrow(train)))
#############Decision Tree ##################
length(nrow(train))
#############Decision Tree ##################
seq_len(nrow(train))
train_ind <- sample(seq_len(nrow(train)),floor(0.8*nrow(train)))
#Model with Decision Tree (remove id from set). Use 80% of train for training, 20% or train to test (to gauge accuracy).
train_ind
sub_train <- train[train_ind,]
train
sub_train <- train[train_ind,]
sub_test <-
sub_train
sub_test <-
sub_train
train
sub_test <-
sub_train
sub_train <- train[train_ind,]
train[train_ind,]
train
train[train_ind,]
sub_test <-train[-train_ind,]
sub_train
dt_mod <- rpart(factor(Activity) ~ .-Id,sub_train,control=list(maxdepth=3))
fancyRpartPlot(dt_mod, sub="")
#Make predictions:
dt_pred <- predict(dt_mod,sub_test,type='class')
confusionMatrix(dt_pred,factor(test$Activity))
dt_pred
confusionMatrix(dt_pred,factor(sub_test$Activity))
conf_dt <- confusionMatrix(dt_pred,factor(sub_test$Activity))
sum(diag(conf_dt))
conf_dt
conf_dt$table
conf_dt <- confusionMatrix(dt_pred,factor(sub_test$Activity))$table
sum(diag(conf_dt))
accuracy <- sum(diag(conf_dt)) / sum(conf_dt)
accuracy
dt_mod <- rpart(factor(Activity) ~ .-Id,sub_train,control=list(maxdepth=5))                                                            ))
dt_mod <- rpart(factor(Activity) ~ .-Id,sub_train,control=list(maxdepth=5))
fancyRpartPlot(dt_mod, sub="")
#Make predictions:
dt_pred <- predict(dt_mod,sub_test,type='class')
conf_dt <- confusionMatrix(dt_pred,factor(sub_test$Activity))$table
accuracy <- sum(diag(conf_dt)) / sum(conf_dt)
accuracy
dt_mod <- rpart(factor(Activity) ~ .-Id,sub_train,control=list(maxdepth(7)))
fancyRpartPlot(dt_mod, sub="")
#Make predictions:
dt_pred <- predict(dt_mod,sub_test,type='class')
conf_dt <- confusionMatrix(dt_pred,factor(sub_test$Activity))$table
accuracy <- sum(diag(conf_dt)) / sum(conf_dt)
accuracy
dt_mod <- rpart(factor(Activity) ~ .-Id,sub_train,control=list(maxdepth(4)))
fancyRpartPlot(dt_mod, sub="")
#Make predictions:
dt_pred <- predict(dt_mod,sub_test,type='class')
conf_dt <- confusionMatrix(dt_pred,factor(sub_test$Activity))$table
accuracy <- sum(diag(conf_dt)) / sum(conf_dt)
accuracy
dt_mod <- rpart(factor(Activity) ~ .-Id,sub_train,control=list(maxdepth(4)))
dt_mod <- rpart(factor(Activity) ~ .-Id,sub_train,control=list(maxdepth=4))
fancyRpartPlot(dt_mod, sub="")
#Make predictions:
dt_pred <- predict(dt_mod,sub_test,type='class')
conf_dt <- confusionMatrix(dt_pred,factor(sub_test$Activity))$table
accuracy <- sum(diag(conf_dt)) / sum(conf_dt)
accuracy
dt_mod <- rpart(factor(Activity) ~ .-Id,sub_train,control=list(maxdepth=5))
fancyRpartPlot(dt_mod, sub="")
#Make predictions:
dt_pred <- predict(dt_mod,sub_test,type='class')
conf_dt <- confusionMatrix(dt_pred,factor(sub_test$Activity))$table
accuracy <- sum(diag(conf_dt)) / sum(conf_dt)
accuracy
dt_mod <- rpart(factor(Activity) ~ .-Id,train,control=list(maxdepth=5))
fancyRpartPlot(dt_mod, sub="")
#Make predictions:
dt_pred <- predict(dt_mod,test,type='class')
dt_pred
#Submit:
df_pred_dt <- data.frame(Id=test$Id,Activity=dt_pred)
df_pred_dt
#Submit:
df_pred_dt <- data.frame(Id=test$Id,Activity=dt_pred)
submission <- write_csv(df_pred_rf,'brelethford_dt.csv')
submission <- write_csv(df_pred_dt,'brelethford_dt.csv')
source('~/Desktop/ML/Rclass/Assignments/kaggle/kaggle.R', echo=TRUE)
