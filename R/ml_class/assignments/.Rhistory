a = 1
a
a <- 23
a
a+2
a; a+2
install.packages("httr")
library(httr)
install.packages("xml")
install.packages("XML")
install.packages("XML")
library("httr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("XML")
install.packages("XML")
library("XML", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
url <- 'https://twitter.com/search?q=donald+trump+twitter&ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Esearch'
xmlpage <- htmlParse(rawToChar(GET(url)$content))
xmlpage
length(capture.output(xmlpage))
capture.output(xmlpage)[1:4]
searchfor <- //p[class="TweetTextSize  js-tweet-text tweet-text" lang="en" data-aria-label-part="0">]
searchfor <- "//p[class="TweetTextSize  js-tweet-text tweet-text" lang="en" data-aria-label-part="0">]""
searchfor <- '//p[class="TweetTextSize  js-tweet-text tweet-text" lang="en" data-aria-label-part="0">]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- '//p[class="TweetTextSize  js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- '//p[@class="TweetTextSize  js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
tweet
capture.output(xmlpage)[1:4]
searchfor <- '//p[@class="TweetTextSize  js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- '//p[@class="TweetTextSize  js-tweet-text tweet-text "]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
tweet
searchfor <- '//p[@class="TweetTextSize  js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- "//p[@class='TweetTextSize  js-tweet-text tweet-text'']"
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
searchfor <- "//p[@class='TweetTextSize  js-tweet-text tweet-text']"
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
tweet
searchfor <- "//p"
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
tweet
url <- 'https://twitter.com/realDonaldTrump'
xmlpage <- htmlParse(rawToChar(GET(url)$content))
length(capture.output(xmlpage))
capture.output(xmlpage)[1:4]
#Now let's try to get just the tweets.
searchfor <- "//p[@class='TweetTextSize  js-tweet-text tweet-text']"
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
url <- 'https://twitter.com/realDonaldTrump?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor'
xmlpage <- htmlParse(rawToChar(GET(url)$content))
length(capture.output(xmlpage))
capture.output(xmlpage)[1:4]
#Now let's try to get just the tweets.
searchfor <- '//p[@class="TweetTextSize TweetTextSize--normal js-tweet-text tweet-text"]'
tweet <- xpathSApply(xmlpage, searchfor, xmlValue)
length(tweet)
tweet[1]
tweet[2]
tweet[3]
tweet[4]
tweet[5]
tail(tweet[5])
tail(tweet[5][100:])
tweet[5][100:]
tweet[5]
searchfor2 <- '//strong[@class="fullname show-popup-with-id u-textTruncate "]'
author <- xpathSApply(xmlpage, searchfor, xmlValue)
author
searchfor2 <- '//strong[@class="fullname show-popup-with-id u-textTruncate "]'
author <- xpathSApply(xmlpage, searchfor2, xmlValue)
author
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
#Practice basic linear modelling in R on the mtcars dataset.
mtcars
#Practice basic linear modelling in R on the mtcars dataset.
data(mtcars)
glimpse(mtcars)
car_mod <- lm(mpg ~ wt, data=mtcars)
car_mod$coefficients
summary(car_mod)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson6 - Linear Regression.R', echo=TRUE)
glimpse(mtcars)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg ~cyl, data=mtcars)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~cyl+wt, data=mtcars)
summar(car_mod2)
summary(car_mod2)
summary(car_mod)
summary(car_mod2)
summary(car_mod)
summary(car_mod2)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~cyl+wt, data=mtcars)
summary(car_mod2)
glimpse(mtcars)
car_mod <- lm(mpg ~ wt, data=mtcars)
summary(car_mod)
glimpse(mtcars)
car_mod <- lm(mpg ~ disp, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ cyl, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ wt, data=mtcars)
summary(car_mod)
glimpse(mtcars)
car_mod <- lm(mpg ~ gear, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ gear, data=mtcars)
summary(car_mod)
glimpse(mtcars)
car_mod <- lm(mpg ~ hp, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ wt, data=mtcars)
car_mod <- lm(mpg ~ cyl, data=mtcars)
car_mod <- lm(mpg ~ cyl, data=mtcars)
summary(car_mod)
car_mod <- lm(mpg ~ factor(cyl), data=mtcars)
summary(car_mod)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
glimpse(mtcars)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
#Improve the model by adding a second variable.
car_mod2 <- lm(mpg~factor(cyl)+wt+hp+am, data=mtcars)
summary(car_mod2)
glimpse(mtcars)
#Improve the model by adding additional variables.
car_mod2 <- lm(mpg~factor(cyl)+wt, data=mtcars)
summary(car_mod2)
install.packages("glimnet")
install.packages("caret")
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("readr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("tidyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("rpart")
library("rpart", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("rattle")
install.packages("RGtk2Extras")
install.packages("rattle")
library(RGtk2)
install.packages("rattle")
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
library("httr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
#Build a classification tree to predict survival. Visualize the tree and check the accuracy of the model.
survival_mod <- rpart(Survived ~ ., ttrain)
survival_mod
head(ttrain)
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(survival_mod, sub="")
head(ttrain)
#Build a classification tree to predict survival. Visualize the tree and check the accuracy of the model.
survival_mod <- rpart(Survived ~ Sex, ttrain)
survival_mod
fancyRpartPlot(survival_mod, sub="")
#Predict how well it fits the test data.
pred_survive = predict(survival_mod,ttest,type="prob")
library(rpart)
#Predict how well it fits the test data.
pred_survive = predict(survival_mod,ttest,type="prob")
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod,ttest,type="prob")
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type="prob")
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest)
pred_survive
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest,type="class")
?predict
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest)
pred_survive
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttrain)
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttrain, type="prob")
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type="prob")
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "prob")
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "vector")
pred_survive
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "class")
vector
vector
pred_survive
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,ttest$Survived)
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "vector")
pred_survive
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,ttest$Survived)
#Build a classification tree to predict survival. Visualize the tree and check the accuracy of the model.
survival_mod <- rpart(Survived ~ Sex, ttrain, response="factor")
class(survival_mod)
class(factor(survival_mod))
#Build a classification tree to predict survival. Visualize the tree and check the accuracy of the model.
class(ttrain$Survived)
#Build a classification tree to predict survival. Visualize the tree and check the accuracy of the model.
class(factor(ttrain$Survived))
survival_mod <- rpart(factor(Survived) ~ Sex, ttrain)
survival_mod
fancyRpartPlot(survival_mod, sub="")
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "vector")
pred_survive
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "prob")
pred_survive
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,ttest$Survived)
#Create a confusion matrix to see how well it fits.
confusionMatrix(factor(pred_survive),ttest$Survived)
class(ttest$Survived)
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,factor(ttest$Survived))
class(pred_survive)
#Create a confusion matrix to see how well it fits.
confusionMatrix(factor(pred_survive),factor(ttest$Survived))
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,factor(ttest$Survived))
class(ttrain)
?factor
survival_mod <- rpart(factor(Survived,1=Yes) ~ Sex, ttrain)
survival_mod <- rpart(factor(Survived,Yes) ~ Sex, ttrain)
survival_mod <- rpart(factor(Survived) ~ Sex, ttrain)
survival_mod
survival_mod <- rpart(factor(Survived) ~ Sex, ttrain)
survival_mod
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,factor(ttest$Survived))
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "prob")
pred_survive
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "class")
pred_survive
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,factor(ttest$Survived))
install.packages("e1071")
library("e1071", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,factor(ttest$Survived))
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
#Build a classification tree to predict survival. Visualize the tree and check the accuracy of the model.
class(factor(ttrain$Survived))
survival_mod
head(ttrain)
survival_mod <- rpart(factor(Survived) ~ Sex+Age+Pclass, ttrain)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
head(ttrain)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=10))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
confusionMatrix(pred_survive,factor(ttest$Survived))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=2))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
confusionMatrix(pred_survive,factor(ttest$Survived))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=2,minsplit(.2)))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=2,minsplit=.2))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
confusionMatrix(pred_survive,factor(ttest$Survived))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=2,minsplit=.5))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=3,minsplit=.5))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=3,minsplit=20))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
confusionMatrix(pred_survive,factor(ttest$Survived))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=3,minsplit=1000))
fancyRpartPlot(survival_mod, sub="")
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=3,minsplit=10))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
confusionMatrix(pred_survive,factor(ttest$Survived))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=3,minsplit=100))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=2,minsplit=100))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
confusionMatrix(pred_survive,factor(ttest$Survived))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=4,minsplit=100))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=4,minsplit=200))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age, ttrain,control = list(maxdepth=2,minsplit=100))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
confusionMatrix(pred_survive,factor(ttest$Survived))
head(ttrain)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age+Fare, ttrain)
fancyRpartPlot(survival_mod, sub="")
#Predict how well it fits the test data.
pred_survive <- predict(survival_mod, ttest, type = "class")
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,factor(ttest$Survived))
#Create a confusion matrix to see how well it fits.
confusionMatrix(pred_survive,factor(ttest$Survived))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ Sex+Pclass+Age+Fare, ttrain,control = list(maxdepth=3,minsplit=100))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
confusionMatrix(pred_survive,factor(ttest$Survived))
#Looks decent. Let's try doing the same thing, but changing some hyperparameters (maxdepth, cp, or minsplit)
survival_mod <- rpart(factor(Survived) ~ ., ttrain,control = list(maxdepth=3,minsplit=100))
fancyRpartPlot(survival_mod, sub="")
pred_survive <- predict(survival_mod, ttest, type = "class")
Sex+Pclass+Age+Fare
Sex+Pclass+Age+Fare
Sex+Pclass+Age+Fare
source('~/Desktop/ML/Rclass/Assignments/Lesson8 - Decision Tree.R', echo=TRUE)
